openapi: 3.0.1
info:
  title: USER AND AUTH API
  version: '1.0.0'
servers:
  - url: http://localhost:8081/
    description: Local server
  - url: https://...
    description: k8s dev

paths:
  /users/{userId}:
    get:
      security:
        - bearerAuth: []
      summary: Получение информации о пользователе
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            example: "c1cfe4b9-f7c2-423c-abfa-6ed1c05a15c5"
          description: Идентификатор пользователя
          required: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users:
    get:
      security:
        - bearerAuth: []
      summary: Получение списка всех пользователей
      tags:
        - Users
      responses:
        "200":
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      summary: Аутентификация пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Неправильные данные аутентификации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/register:
    post:
      summary: Регистрация нового пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Невалидные данные
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "c1cfe4b9-f7c2-423c-abfa-6ed1c05a15c5"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john.doe@example.com"
        roles:
          type: array
          items:
            type: string
          example: ["developer", "admin"]
        createdDate:
          type: string
          format: date-time
          example: "2024-01-01T10:00:00Z"

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "yourpassword"

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "yourpassword"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: "JWT токен для авторизации"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 500
        message:
          type: string
          example: "Internal server error"
